Assignment name  : mini_serv
Expected files   : mini_serv.c
Allowed functions: write, close, select, socket, accept, listen, send, recv, bind, strstr, malloc, realloc, free, calloc, bzero, atoi, sprintf, strlen, exit, strcpy, strcat, memset, htons, htonl
--------------------------------------------------------------------------------

Ecrivez un programme qui écoutera les clients se connecter sur un certain port sur 127.0.0.1 et laissera les clients parler entre eux.

Ce programme prendra comme premier argument le port auquel se connecter.
Si aucun argument n'est donné, il doit écrire dans stderr "Wrong number of arguments" suivi d'un \n et sortir avec le statut 1.
Si un appel système renvoie une erreur avant que le programme ne commence à accepter des connexions, il doit écrire dans stderr "Fatal error" suivi d'un \n et sortir avec le statut 1.
Si vous ne pouvez pas allouer de la mémoire, vous devez écrire dans stderr "Fatal error" suivi d'un \n et sortir avec le statut 1.

Votre programme doit être non bloquant mais le client peut être paresseux et s'il ne lit pas votre message vous ne devez PAS le déconnecter...

Votre programme ne doit pas contenir #define preproc
Votre programme ne doit écouter que 127.0.0.1
Le fd que vous recevrez sera déjà configuré pour que 'recv' ou 'send' bloque si select n'a pas été appelé avant de les appeler, mais ne bloquera pas sinon.

Quand un client se connecte au serveur :
- le client recevra un identifiant. Le premier client recevra l'identifiant 0 et chaque nouveau client recevra l'identifiant du dernier client + 1.
- %d sera remplacé par ce nombre
- un message est envoyé à tous les clients qui se sont connectés au serveur : "server: client %d just arrived\n".


les clients doivent être capables d'envoyer des messages à votre programme.
- le message ne comportera que des caractères imprimables, il n'est pas nécessaire de le vérifier
- un seul message peut contenir plusieurs retours à la ligne
- lorsque le serveur reçoit un message, il doit le renvoyer à tous les autres clients avec "client %d: " avant chaque ligne !


Quand un client se déconnecte du serveur :
- un message est envoyé à tous les clients qui étaient connectés au serveur : "server: client %d just left\n"

Les leaks sont interdites (de mémoire ou de FD)

Pour vous aider, vous trouverez le fichier main.c avec le début d'un serveur et peut-être quelques fonctions utiles. (Attention, ce fichier utilise des fonctions interdites et fait des choses qui ne doivent pas être faites dans votre programme).

Attention notre testeur s'attend à ce que vous envoyiez les messages aussi vite que possible. Ne faites pas de tampon inutile.

L'évaluation peut être un peu plus longue que d'habitude...

Hint : vous pouvez utiliser nc pour tester votre programme
Hint : vous devriez utiliser nc pour tester votre programme
Hint : Pour tester vous pouvez utiliser fcntl(fd, F_SETFL, O_NONBLOCK) mais utilisez select et ne vérifiez JAMAIS EAGAIN (man 2 send).
